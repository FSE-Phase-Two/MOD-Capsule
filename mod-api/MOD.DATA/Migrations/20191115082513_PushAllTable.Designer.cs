// <auto-generated />
using System;
using MOD.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MOD.DATA.Migrations
{
    [DbContext(typeof(MODContext))]
    [Migration("20191115082513_PushAllTable")]
    partial class PushAllTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MOD.DATA.Model.Mentor", b =>
                {
                    b.Property<int>("MentorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("RegDatetime");

                    b.HasKey("MentorId");

                    b.ToTable("Mentor");
                });

            modelBuilder.Entity("MOD.DATA.Model.MentorCalender", b =>
                {
                    b.Property<int>("MentorCalenderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<int>("MentorId");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("TechnologyId");

                    b.HasKey("MentorCalenderId");

                    b.HasIndex("MentorId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("MentorCalender");
                });

            modelBuilder.Entity("MOD.DATA.Model.MentorTechnology", b =>
                {
                    b.Property<int>("MentorTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Experience");

                    b.Property<int>("MentorId");

                    b.Property<int>("SelfRating");

                    b.Property<int>("TechnologyId");

                    b.HasKey("MentorTechnologyId");

                    b.HasIndex("MentorId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("MentorTechnology");
                });

            modelBuilder.Entity("MOD.DATA.Model.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int>("MentorId");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("PaymentId");

                    b.HasIndex("MentorId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("MOD.DATA.Model.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Duration");

                    b.Property<double>("Fees");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Prerequisite")
                        .IsRequired();

                    b.Property<string>("TechnologyContent")
                        .IsRequired();

                    b.HasKey("TechnologyId");

                    b.ToTable("Technology");
                });

            modelBuilder.Entity("MOD.DATA.Model.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountReceived");

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<int>("MentorId");

                    b.Property<int>("Progress");

                    b.Property<int>("Rating");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TechnologyId");

                    b.Property<int>("UserId");

                    b.HasKey("TrainingId");

                    b.HasIndex("MentorId");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("UserId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("MOD.DATA.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("RegDatetime");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MOD.DATA.Model.MentorCalender", b =>
                {
                    b.HasOne("MOD.DATA.Model.Mentor", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MOD.DATA.Model.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MOD.DATA.Model.MentorTechnology", b =>
                {
                    b.HasOne("MOD.DATA.Model.Mentor", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MOD.DATA.Model.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MOD.DATA.Model.Payment", b =>
                {
                    b.HasOne("MOD.DATA.Model.Mentor", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MOD.DATA.Model.Training", b =>
                {
                    b.HasOne("MOD.DATA.Model.Mentor", "Mentor")
                        .WithMany("Trainings")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MOD.DATA.Model.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MOD.DATA.Model.User", "User")
                        .WithMany("Trainings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
